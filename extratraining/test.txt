1	What's the output?
!!null;
!!"";
!!1;
⦁	A: false true false
✔	B: false false true 
⦁	C: false true true
⦁	D: true true false

The double exclamation mark (!!) is used to convert a value to its boolean equivalent. Here's the breakdown of each value:

!!null

null is a falsy value.
!null evaluates to true (because null is falsy).
!!null evaluates to false.
!!""

"" (an empty string) is a falsy value.
!"" evaluates to true (because "" is falsy).
!!"" evaluates to false.
!!1

1 is a truthy value.
!1 evaluates to false (because 1 is truthy).
!!1 evaluates to true.
Therefore, the correct output is:

!!null => false
!!"" => false
!!1 => true

!! возвращает буленское значение противоположного




2	What does this return?
[..."Lydia"]; //… - spread operator – spreads elements of the following array/string
✔	A: ["L", "y", "d", "i", "a"]
⦁	B: ["Lydia"]
⦁	C: [[], "Lydia"]
⦁	D: [["L", "y", "d", "i", "a"]]

The spread operator (...) is used to spread the elements of an iterable (like an array or string) into individual elements. When used on a string, it will spread each character of the string into separate elements of an array.

Let's see what happens with [..."Lydia"]:

The string "Lydia" is spread into individual characters: ["L", "y", "d", "i", "a"].

[...]
const array1 = [1, 2, 3];
const array2 = [4, 5, 6];
const combinedArray = [...array1, ...array2];

console.log(combinedArray); // [1, 2, 3, 4, 5, 6]

const array1 = [1, 2, 3];
const array2 = [4, 5, 6];
const combinedArray = [array1, array2];

console.log(combinedArray); // [[1, 2, 3], [4, 5, 6]]






3 What does this return?
const firstPromise = new Promise((res, rej) => {
  setTimeout(res, 500, "one"); //the method res will be called in 500 milleseconds with argument “one”
});

const secondPromise = new Promise((res, rej) => {
  setTimeout(res, 100, "two");
});

Promise.race([firstPromise, secondPromise]).then(res => console.log(res));
//race – the method of Promise that gets several promises and performs an one that is resolved first
⦁	A: "one"
✔	B: "two"
⦁	C: "two" "one"
⦁	D: "one" "two"




4	What's the output?
let person = { name: "Lydia" };
const members = [person];
person = null;

console.log(members);
⦁	A: null
⦁	B: [null]
⦁	C: [{}]
✔	D: [{ name: "Lydia" }]


В этой строке переменная person теперь указывает на null. Это не изменяет сам объект, на который ранее указывала переменная person, а лишь меняет саму переменную person. Теперь переменная person не ссылается на объект { name: "Lydia" }. Здесь массив members все еще содержит ссылку на оригинальный объект { name: "Lydia" }, потому что когда мы добавили person в members, мы добавили ссылку на объект, а не значение переменной person. Поэтому массив members выглядит так:
[ { name: "Lydia" } ]




5	What's the output?
const person = {
  name: "Lydia",
  age: 21
};

for (const item in person) { //iterates keys of an object
  console.log(item);
}
⦁	A: { name: "Lydia" }, { age: 21 }
✔	B: "name", "age"
⦁	C: "Lydia", 21
⦁	D: ["name", "Lydia"], ["age", 21]

for (const key in person) {
  console.log(`${key}: ${person[key]}`);
} name: Lydia  age: 21


6	What's the output?
console.log(3 + 4 + "5");
⦁	A: "345"
✔	B: "75"
⦁	C: 12
⦁	D: "12"


7	What's the output?
const a = {};
const b = { key: "b" };
const c = { key: "c" };
//Any object key should be a string ; if an object doesn’t have the method
//toString , JS will convert the object to [object Object] 
a[b] = 123;
a[c] = 456;

console.log(a[b]);
⦁	A: 123
✔	B: 456
⦁	C: undefined
⦁	D: ReferenceError




8	What's the output?
const numbers = [1, 2, 3];
numbers[10] = 11;
console.log(numbers.length);
✔	A: 11
⦁	B: 4
⦁	C: Error


9	What's the value of num?
const num = parseInt("7*6");
⦁	A: 42
⦁	B: "42"
✔	C: 7
⦁	D: NaN

Функция parseInt прекращает парсинг строки, как только встречает недопустимый для числа символ. В данном случае, она встречает символ * сразу после 7, поэтому возвращает 7, так как это единственная часть строки, которая может быть преобразована в число до встречи с недопустимым символом.
принимает только цифры и точку. идет посимвольно слева напрво

 parseInt(+"10") - плюс переведет в число
 Number('10')
 Number('10b') - рузельтат NaN - not a number


 eval('10+10') - воспиинимает всю строку как математическое выражение, то он его посчитает и вернет результат



10	What's the output?
function getInfo(member, year) {
  member.name = "Lydia";
  year = "1998";
}

const person = { name: "Sarah" };
const birthYear = "1997";

getInfo(person, birthYear);

console.log(person, birthYear);
✔	A: { name: "Lydia" }, "1997"
⦁	B: { name: "Sarah" }, "1998"
⦁	C: { name: "Lydia" }, "1998"
⦁	D: { name: "Sarah" }, "1997"

person ссылка на то место, где хранится объэект.
 yeAR передали самц строку. никакого логического 
 если поссылке что-то меняем, то эти изменения применяются




11	What's the output?
function greeting() {
  throw "Hello world!";
}

function sayHi() {
  try {
    const data = greeting();
    console.log("It worked!", data);
  } catch (e) {
    console.log("Oh no an error:", e);
  }
}

sayHi();
⦁	A: It worked! Hello world!
✔	B: Oh no an error: undefined
⦁	C: SyntaxError: can only throw Error objects
⦁	D: Oh no an error: Hello world!




12	What's the output?

const numbers = [1, 2, 3, 4, 5];
const [y] = numbers;

console.log(y);
⦁	A: [[1, 2, 3, 4, 5]]
⦁	B: [1, 2, 3, 4, 5]
✔	C: 1
⦁	D: [1]
JS may unpack values from arrays through destructuring. For example:
[a, b] = [1, 2];

чтоб вывести 2ку
const [x,y] = numbers;
console.log(y); //1,2

const [ ,y] = numbers;
const [_,y] = numbers; // одинаковые по смыслу. выведут двойку

const [ , ,y] = numbers;
const [_,_,y] = numbers; // выведет 3-ку из массива

map((_,i)) =>


 

13	What's the output?
const user = { name: "Lydia", age: 21 };
const admin = { admin: true, ...user };

method spread

console.log(admin);
⦁	A: { admin: true, user: { name: "Lydia", age: 21 } }
✔	B: { admin: true, name: "Lydia", age: 21 }
⦁	C: { admin: true, user: ["Lydia", 21] }
⦁	D: { admin: true }



14	What's the output?
const settings = {
  username: "lydiahallie",
  level: 19,
  health: 90
};

const data = JSON.stringify(settings, ["level", "health"]);//considered only // specified keys 
console.log(data);
✔	A: "{"level":19, "health":90}"
⦁	B: "{"username": "lydiahallie"}"
⦁	C: "["level", "health"]"
⦁	D: "{"username": "lydiahallie", "level":19, "health":90}"


15	What's the output?
let num = 10;

const increaseNumber = () => num++;
const increasePassedNumber = number => number++;

const num1 = increaseNumber();
const num2 = increasePassedNumber(num1);

console.log(num1);
console.log(num2);
✔	A: 10, 10
⦁	B: 10, 11
⦁	C: 11, 11
⦁	D: 11, 12

num1 - сначла присваивается число num, а потом происходит прибавление. снчала возвращает чтсло 10, а потом уже увеличивает его на 1

постфиксная запись num++
префиксная запись ++num

const increaseNumber = num => num++; // развернутый ответ - num => return num++; в таком случае сачала возвращаем, потом увеличиваем на 1
// const increaseNumber = num => { num++; return num; } // так будет 11. сначала увеличиваем, потом возвращаем




16	What's the output?
[1, 2, 3, 4].reduce((x, y) => console.log(x, y));
⦁	A: 1 2 and 3 3 and 6 4
⦁	B: 1 2 and 2 3 and 3 4
⦁	C: 1 undefined and 2 undefined and 3 undefined and 4 undefined
✔	D: 1 2 and undefined 3 and undefined 4



17	What's the output?
function addToList(item, list) {
  return list.push(item);
}

const result = addToList("apple", ["banana"]);
console.log(result);
⦁	A: ['apple', 'banana']
✔	B: 2
⦁	C: true
⦁	D: undefined
Метод push() изменяет исходный массив и возвращает новую длину массива после добавления элемента.
Если вы хотите, чтобы функция addToList возвращала измененный массив, вам нужно вернуть list после вызова push().

function addToList(item, list) {
  list.push(item); // Добавляем элемент в массив
  return list; // Возвращаем измененный массив
}

const result = addToList("apple", ["banana"]);
console.log(result);




18	What is the output?
const list = [1 + 2, 1 * 2, 1 / 2]
console.log(list)
⦁	A: ["1 + 2", "1 * 2", "1 / 2"]
⦁	B: ["12", 2, 0.5]
✔	C: [3, 2, 0.5]
⦁	D: [1, 1, 1]



19	What is the output?
function sayHi(name) {
  return `Hi there, ${name}`
}

console.log(sayHi())
⦁	A: Hi there,
✔	B: Hi there, undefined
⦁	C: Hi there, null
⦁	D: ReferenceError



20	What's the output?
console.log("I want pizza"[0])
⦁	A: """
✔	B: "I"
⦁	C: SyntaxError
⦁	D: undefined



21	What is the output?
function checkAge(age) {
  if (age < 18) {
    const message = "Sorry, you're too young."
  } else {
    const message = "Yay! You're old enough!"
  }

  return message
}

console.log(checkAge(21))
⦁	A: "Sorry, you're too young."
⦁	B: "Yay! You're old enough!"
✔	C: ReferenceError
⦁	D: undefined


22	What's the output?
function sum(num1, num2 = num1) {
  console.log(num1 + num2)
}

sum(10)
⦁	A: NaN
✔	B: 20
⦁	C: ReferenceError
⦁	D: undefined



23.What's the output?
let newList = [1, 2, 3].push(4)

console.log(newList.push(5))
⦁	A: [1, 2, 3, 4, 5]
⦁	B: [1, 2, 3, 5]
⦁	C: [1, 2, 3, 4]
✔	D: Error
